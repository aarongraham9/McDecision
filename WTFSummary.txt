This should explain all (most?) of the WTFs that there are to find in this solution.
I'm sure there are more, but such is the nature of software development: unintended behaviors.

1) The Web Host
	a) Activating the Minecraft server from within IIS itself (Global.asax.cs:ResetHost)
	b) Sharing the reference for the process using the Application variable (Global.asax.cs:ResetHost, 
	   McController.cs:MakeDecision)
	c) Using a custom-written controller to handle static file content (IndexController.cs)
	d) Using the windows registry to derive mime types (IndexController.cs:GetMimeType)
	d) Custom threading in a web application -- Thread.Sleep, Process.Start (Global.asax.cs:ResetHost, 
	   McController.cs:MakeDecision)
	e) Having a better solution than the "current" version commented out in the code 
	   (McController.cs:MakeDecision)
	f) Using "Yes" as a default answer when access to the RNG is denied. (McController.cs:MakeDecision)
	g) When the minecraft server has to be restarted, signals McClientWatcher to reload the client via 
	   C:\mcrestarted.txt. (Global.asax.cs:ResetHost)
	h) This is vulnerable to race conditions, as the "listener" is indiscriminate about which response it's 
	   reading.  If two clients make requests very close to one another, both clients will receive the same 
	   response.
2) Minecraft/Redstone
	a) Non-enterprisey (but better) solution outside the containment area
	b) Using weather to facilitate communication between the host -> minecraft
	c) Using tricks of the dropper+hopper+comparator as a random number generator
	d) Overcomplicated wiring of redstone latches to prevent both results from firing at once
	e) Unneccessary pistons and repeaters in the final communication loop
	f) Dead code in the corners (not used at all in the solution, but left in the "code")
3) Environmental
	a) It only works with a player logged into the minecraft server
	b) If no player is logged in, it answers "YES" always.
	c) Custom console application monitors C:\mcrestarted.txt file for changes and kills/restarts minecraft 
	   on the desktop (since it requires a GUI) -- If you see princess peach logged in, that's the automated 
	   client.
	d) As a side-note, since we're using daylight sensors in the redstone, be assured that decisions are
	   being made every 20 minutes, even if nobody is using the decision engine, as the day/night cycle 
	   in minecraft is 20 minutes long.
4) Not my WTFs
	a) When watching the minecraft server (via java) most "normal" messages come through STDERR, not STDOUT
